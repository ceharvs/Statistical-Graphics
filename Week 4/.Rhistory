library(ISLR)
library(leaps)
library(lattice)
install.packages("leaps")
library(ISLR)
library(leaps)
library(lattice)
head(Hitters)
tail(Hitters)
names(Hitters) # same as colnames
dim(Hitters)  # rows and columns
# Check for missing data
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters)) # quick chec
windows(width=7,height=7)
splom(Hitters)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
head(Hitters)
is.list(regfit.full)  # Yes!
names(regfit.full) # Component names
# What we want is likely in there
# somewhere if we can recognized it.
regfit.full$xnames
regfit.full$nbest
regfit.full$vorder
regfit.full$lopt # Eureka
# Rename variables for convenience
varInd <- regfit.full$lopt
head(varInd,10)
varNam <- regfit.full$xnames
varNam[1]
# Second model indices: 1, 13
varNam[c(1,13)]
varNam[c(1,3,13)]
# To avoid looking for the indices of the n variable
# model (counting the mean) we can write a little
# function that returns the desired subscripts.
subs <- function(n){
if(n==1)return(1)
b <- n*(n+1)/2
return(seq(b-n+1,b))
}
# check
subs(1)
subs(2)
subs(3)
varNam[ varInd[subs(3)] ]
# Four variable model
varNam[ varInd[ subs(4)] ]
rx = c(0,8)
ry = c(1,20)
windows(width=6,height=6)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:n){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #  draw the plot border
# put labels in the plot margins
mtext(varNam,side=2,at=20:1,adj=1,line=.3,las=1)
mtext(as.character(0:8),at=0:8, side=3)
# reset the device plot margin
par(oldPar)
windows(width=6,height=6)
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
subs <- function(n){
if(n==1)return(1)
b <- n*(n+1)/2
return(seq(b-n+1,b))
}
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:n){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #
head(Hitters)
tail(Hitters)
names(Hitters) # same as colnames
dim(Hitters)  # rows and columns
# Check for missing data
sum(is.na(Hitters$Salary))
# Data preparation:
#   For this assignment
#   omit rows with missing data
#
#   Sometimes the missing data
#   has a story to tell
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters)) # quick check
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
# 2.1 Redesigning the table
#
# The table is a candidate for redesign
# We typically can't see the whole table
# layed out in rows and columns in the R
# console.
#
# The " "s are chart junk that make it
# harder to the *s.
#
# Here a binary heat map could work
# with variable names as rows
# number of variables in model as columns.
#
# Focusing and sorting:
# We could drop the unused variables and
# think about reordering the used ones.
#
# Can we find the needed information
# in the regfit.full object to make a plot?
# The script below does and construct a plot.
# Fur
# leaps is on old R function? Results
# were often returned as a list.  As
# indicated below
is.list(regfit.full)  # Yes!
names(regfit.full) # Component names
# What we want is likely in there
# somewhere if we can recognized it.
regfit.full$xnames
regfit.full$nbest
regfit.full$vorder
regfit.full$lopt # Eureka
# This has the stacked indices for
# variables in the models, starting
# with the model with 1 variable.
# Rename variables for convenience
varInd <- regfit.full$lopt
head(varInd,10)
varNam <- regfit.full$xnames
# First model index from varInd:  1
varNam[1]
# Second model indices: 1, 13
varNam[c(1,13)]
# Third model indices: 1, 3, 13
#
varNam[c(1,3,13)]
# To avoid looking for the indices of the n variable
# model (counting the mean) we can write a little
# function that returns the desired subscripts.
subs <- function(n){
if(n==1)return(1)
b <- n*(n+1)/2
return(seq(b-n+1,b))
}
# check
subs(1)
subs(2)
subs(3)
# Three variable model
varNam[ varInd[subs(3)] ]
# Four variable model
varNam[ varInd[ subs(4)] ]
# Below we turn the ISLR output
# table into a plot that also
# includes the intercept.
#
# The script below uses R base
# level graphics
# We the x  and y scales.
# By default R will expand these
# these a bit before they are used.
## Run
rx = c(0,8)
ry = c(1,20)
# Open a graphics device.
# The RStudio graphics device
# does not handle a few ways of
# of adding to a plot.
windows(width=6,height=6)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:n){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #  draw the plot border
# put labels in the plot margins
mtext(varNam,side=2,at=20:1,adj=1,line=.3,las=1)
mtext(as.character(0:8),at=0:8, side=3)
# reset the device plot margin
par(oldPar)
windows(width=6,height=6)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:10){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #  draw the plot border
windows(width=6,height=6)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:10){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #  draw the plot border
# put labels in the plot margins
mtext(varNam,side=2,at=20:1,adj=1,line=.3,las=1)
mtext(as.character(0:8),at=0:8, side=3)
# reset the device plot margin
par(oldPar)
windows(width=6,height=6)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.8,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,xlab='',
ylab='',main="Best Hitter Models with 1 to 8 Variables")
# Add points
# Note this plots the first variable at the top
for (j in 0:500){
points(rep(j,j+1),21-varInd[subs(j+1)],pch=21,bg="red",cex=1.5)
abline(h=c(4.5,8.5,12.5,16.5),col=gray(.8))
abline(v=c(2.5,5.5), col=gray(.8))
}
box()  #  draw the plot border
# put labels in the plot margins
mtext(varNam,side=2,at=20:1,adj=1,line=.3,las=1)
mtext(as.character(0:8),at=0:8, side=3)
# reset the device plot margin
par(oldPar)
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
# Extra:  for a comparison later.
# MSE = RSS/n
# Full model MSE
model10.MSE = reg.summary$rss[10]/nrow(Hitters)
windows(width=6, height=6)
par(mfrow=c(2,2))
# 1st row 1st  column
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
# 1st row 2nd  column
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
loc <- which.max(reg.summary$adjr2)
loc
points(loc,reg.summary$adjr2[loc], col="red",cex=2,pch=20)
# 2nd row 1st column
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
loc <- which.min(reg.summary$cp)
loc
points(loc,reg.summary$cp[loc],col="red",cex=2,pch=20)
# 2nd row 2nd column
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
loc <-  which.min(reg.summary$bic)
loc
points(loc,reg.summary$bic[loc],col="red",cex=2,pch=20)
coef(regfit.full,6)
